const { createClient } = require('@supabase/supabase-js');
require('dotenv').config({ path: '.env.local' });

// Configuraci√≥n de Supabase
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
	console.error('‚ùå Faltan variables de entorno de Supabase');
	process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

// Funci√≥n para generar contenido usando DeepSeek Chat
async function generateWithDeepSeekChat() {
	const prompt = `Genera una lectura educativa para ni√±os de 6-8 a√±os con las siguientes especificaciones:

T√çTULO: Un t√≠tulo atractivo y corto
LECTURA: Una historia de 300-500 palabras que sea:
- Apropiada para ni√±os de 6-8 a√±os
- Con un tema educativo (amistad, naturaleza, valores, etc.)
- Con un mensaje positivo
- F√°cil de entender

PREGUNTAS: 5 preguntas de comprensi√≥n lectora con 4 opciones cada una (A, B, C, D), donde solo una sea correcta.

Formato de respuesta JSON:
{
  "title": "T√≠tulo de la lectura",
  "content": "Contenido de la lectura...",
  "questions": [
    {
      "question_text": "¬øCu√°l es el tema principal?",
      "options": [
        {"text": "Opci√≥n A", "is_correct": false},
        {"text": "Opci√≥n B", "is_correct": true},
        {"text": "Opci√≥n C", "is_correct": false},
        {"text": "Opci√≥n D", "is_correct": false}
      ]
    }
  ]
}`;

	try {
		// Simulamos la respuesta del chat (en la pr√°ctica usar√≠as la API de DeepSeek)
		// Por ahora generamos contenido local para demostrar la estructura
		const generatedContent = {
			title: "El Conejito Valiente",
			content: `Hab√≠a una vez un peque√±o conejito llamado Pelus√≠n que viv√≠a en un bosque m√°gico. Pelus√≠n era muy t√≠mido y siempre se escond√≠a cuando ve√≠a a otros animales.

Un d√≠a, mientras caminaba por el bosque, escuch√≥ unos llantos que ven√≠an de un √°rbol cercano. Al acercarse, vio a un pajarito beb√© que se hab√≠a ca√≠do de su nido y no pod√≠a volver.

Pelus√≠n sinti√≥ mucha pena por el pajarito. Aunque ten√≠a miedo, sab√≠a que ten√≠a que ayudarlo. Con mucho cuidado, trep√≥ por el √°rbol usando sus patitas y sus dientes para agarrarse.

Era dif√≠cil subir, pero Pelus√≠n no se rindi√≥. Cuando lleg√≥ hasta el pajarito, lo tom√≥ suavemente con sus patitas y lo baj√≥ hasta el suelo. Luego, lo ayud√≥ a encontrar a su mam√° p√°jaro.

La mam√° p√°jaro estaba muy agradecida y le dio a Pelus√≠n un abrazo con sus alas. Desde ese d√≠a, Pelus√≠n se sinti√≥ m√°s valiente y todos los animales del bosque lo admiraban por su bondad.

Pelus√≠n aprendi√≥ que ser valiente no significa no tener miedo, sino hacer lo correcto aunque tengamos miedo.`,
			questions: [
				{
					question_text: "¬øC√≥mo se llamaba el conejito de la historia?",
					options: [
						{ text: "Pelus√≠n", is_correct: true },
						{ text: "Peludito", is_correct: false },
						{ text: "Pelus√≥n", is_correct: false },
						{ text: "Pelusito", is_correct: false }
					]
				},
				{
					question_text: "¬øQu√© encontr√≥ Pelus√≠n en el bosque?",
					options: [
						{ text: "Una flor bonita", is_correct: false },
						{ text: "Un pajarito beb√© ca√≠do", is_correct: true },
						{ text: "Una zanahoria", is_correct: false },
						{ text: "Un amigo conejo", is_correct: false }
					]
				},
				{
					question_text: "¬øC√≥mo ayud√≥ Pelus√≠n al pajarito?",
					options: [
						{ text: "Lo llev√≥ volando", is_correct: false },
						{ text: "Lo trep√≥ de vuelta al nido", is_correct: false },
						{ text: "Lo baj√≥ del √°rbol con cuidado", is_correct: true },
						{ text: "Le dio de comer", is_correct: false }
					]
				},
				{
					question_text: "¬øQu√© aprendi√≥ Pelus√≠n al final?",
					options: [
						{ text: "Que no debe tener miedo nunca", is_correct: false },
						{ text: "Que ser valiente es hacer lo correcto aunque tengamos miedo", is_correct: true },
						{ text: "Que los p√°jaros son peligrosos", is_correct: false },
						{ text: "Que no debe ayudar a otros", is_correct: false }
					]
				},
				{
					question_text: "¬øC√≥mo se sinti√≥ Pelus√≠n despu√©s de ayudar?",
					options: [
						{ text: "M√°s t√≠mido que antes", is_correct: false },
						{ text: "M√°s valiente y admirado", is_correct: true },
						{ text: "Triste y arrepentido", is_correct: false },
						{ text: "Enojado con todos", is_correct: false }
					]
				}
			]
		};

		return generatedContent;
	} catch (error) {
		console.error('‚ùå Error generando con DeepSeek Chat:', error);
		throw error;
	}
}

// Funci√≥n para insertar en Supabase
async function insertReadingToSupabase(readingData) {
	try {
		// Verificar si ya existe una lectura para hoy
		const today = new Date().toISOString().split('T')[0];
		const { data: existingReading } = await supabase
			.from('readings')
			.select('id')
			.eq('created_at', today)
			.single();

		if (existingReading) {
			console.log('‚ö†Ô∏è Ya existe una lectura para hoy');
			return { success: false, message: 'Ya existe una lectura para hoy' };
		}

		// Insertar la lectura
		const { data: reading, error: readingError } = await supabase
			.from('readings')
			.insert({
				title: readingData.title,
				content: readingData.content
			})
			.select()
			.single();

		if (readingError) {
			throw new Error(`Error insertando lectura: ${readingError.message}`);
		}

		console.log('‚úÖ Lectura insertada:', reading.id);

		// Insertar preguntas y opciones
		for (const questionData of readingData.questions) {
			const { data: question, error: questionError } = await supabase
				.from('questions')
				.insert({
					reading_id: reading.id,
					question_text: questionData.question_text
				})
				.select()
				.single();

			if (questionError) {
				throw new Error(`Error insertando pregunta: ${questionError.message}`);
			}

			// Insertar opciones
			for (const option of questionData.options) {
				const { error: optionError } = await supabase
					.from('question_options')
					.insert({
						question_id: question.id,
						option_text: option.text,
						is_correct: option.is_correct
					});

				if (optionError) {
					throw new Error(`Error insertando opci√≥n: ${optionError.message}`);
				}
			}

			console.log('‚úÖ Pregunta insertada:', question.id);
		}

		return { success: true, readingId: reading.id };
	} catch (error) {
		console.error('‚ùå Error insertando en Supabase:', error);
		throw error;
	}
}

// Funci√≥n principal
async function main() {
	try {
		console.log('üöÄ Iniciando generaci√≥n con DeepSeek Chat...');
		console.log('üìÖ Fecha:', new Date().toLocaleDateString());

		// Generar contenido
		const readingData = await generateWithDeepSeekChat();
		console.log('‚úÖ Contenido generado');

		// Insertar en Supabase
		const result = await insertReadingToSupabase(readingData);
		
		if (result.success) {
			console.log('üéâ ¬°Lectura generada e insertada exitosamente!');
			console.log('üìñ ID de lectura:', result.readingId);
		} else {
			console.log('‚ö†Ô∏è', result.message);
		}

	} catch (error) {
		console.error('üí• Error fatal:', error.message);
		process.exit(1);
	}
}

// Ejecutar si es llamado directamente
if (require.main === module) {
	main();
}

module.exports = { generateWithDeepSeekChat, insertReadingToSupabase };
